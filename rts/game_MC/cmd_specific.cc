/**
* Copyright (c) 2017-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*/

#include "../engine/cmd.h"
#include "../engine/game_env.h"
#include "../engine/cmd_receiver.h"

// Derived class. Note that the definition is automatically generated by a python file.
#include "../engine/cmd.gen.h"
#include "../engine/cmd_specific.gen.h"
#include "cmd_specific.gen.h"

bool CmdGenerateMap::run(GameEnv *env, CmdReceiver*) {
    return env->GenerateMap(_num_obstacles, _init_resource) ? true : false;
}

#define _CREATE(...) receiver->SendCmd(CmdIPtr(new CmdCreate(INVALID, __VA_ARGS__)))
#define _CHANGE_RES(...) receiver->SendCmd(CmdIPtr(new CmdChangePlayerResource(INVALID, __VA_ARGS__)))

bool CmdGameStart::run(GameEnv *env, CmdReceiver *receiver) {
    for (const auto &info : env->GetMap().GetPlayerMapInfo()) {
        _CREATE(BASE, PointF(info.base_coord), info.player_id);
        _CREATE(RESOURCE, PointF(info.resource_coord), info.player_id);
        _CHANGE_RES(info.player_id, info.initial_resource);
    }
    return true;
}

bool CmdGameStartSpecific::run(GameEnv*, CmdReceiver* receiver) {
    const PlayerId player_id = 0;
    const PlayerId enemy_id = 1;
    _CREATE(RESOURCE, PointF(2, 1), player_id);
    _CREATE(WORKER, PointF(4, 4), player_id);
    _CREATE(WORKER, PointF(5, 5), player_id);
    _CREATE(WORKER, PointF(6, 7), player_id);
    //_CREATE(RANGE_ATTACKER, PointF(15, 18), player_id);
    _CREATE(BASE, PointF(7, 2), player_id);
    //_CREATE(BARRACKS, PointF(8, 5), player_id);
    _CHANGE_RES(player_id, 100);

    _CREATE(BASE, PointF(18, 16), enemy_id);
    //_CREATE(WORKER, PointF(17, 15), enemy_id);
    //_CREATE(WORKER, PointF(18, 15), enemy_id);
    //_CREATE(WORKER, PointF(19, 16), enemy_id);
    _CREATE(RESOURCE, PointF(14, 18), enemy_id);
    //_CREATE(RANGE_ATTACKER, PointF(12, 11), enemy_id);
    _CHANGE_RES(enemy_id, 100);

    return true;
}

bool CmdGenerateUnit::run(GameEnv *env, CmdReceiver *receiver) {
    auto f = env->GetRandomFunc();
    auto gen_loc = [&] (int player_id) -> PointF {
        // Note that we could not write
        //    PointF( f(8) + ...,  f(8) + ...)
        // since the result will depend on which f is evaluated first, and will yield different results on
        // different platform/compiler (e.g., clang and gcc yields different results).
        // The following implementation is uniquely determined.
        int x = f(6) + player_id * 10 + 2;
        int y = f(6) + player_id * 10 + 2;
        return PointF(x, y);
    };
    for (PlayerId player_id = 0; player_id < 2; player_id++) {
        // Generate workers (up to three).
        for (int i = 0; i < 3; i++) {
            if (f(10) >= 5) {
                _CREATE(WORKER, gen_loc(player_id), player_id);
            }
        }
        if (f(10) >= 8)
            _CREATE(BARRACKS, gen_loc(player_id), player_id);
        if (f(10) >= 5)
            _CREATE(MELEE_ATTACKER, gen_loc(player_id), player_id);
        if (f(10) >= 5)
            _CREATE(RANGE_ATTACKER, gen_loc(player_id), player_id);
    }
    return true;
}

#undef _CHANGE_RES
#undef _CREATE
